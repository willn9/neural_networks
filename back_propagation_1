import numpy as np
import matplotlib.colors as mcolors
import matplotlib.pyplot as plt


### PART 1: set up neural network structure and cost function.

sigma = lambda z: 1 / (1 + np.exp(-z))
d_sigma = lambda z: np.cosh(z / 2) ** (-2) / 4


# This function initialises the network with it's structure, it also resets any training already done.
def reset_network(n1=6, n2=7, random=np.random):
    global W1, W2, W3, b1, b2, b3
    W1 = random.randn(n1, 1) / 2
    W2 = random.randn(n2, n1) / 2
    W3 = random.randn(2, n2) / 2
    b1 = random.randn(n1, 1) / 2
    b2 = random.randn(n2, 1) / 2
    b3 = random.randn(2, 1) / 2


# This function feeds forward each activation to the next layer. It returns all weighted sums and activations.
def network_function(a0):
    z1 = W1 @ a0 + b1
    a1 = sigma(z1)
    z2 = W2 @ a1 + b2
    a2 = sigma(z2)
    z3 = W3 @ a2 + b3
    a3 = sigma(z3)
    return a0, z1, a1, z2, a2, z3, a3


def cost(x, y):
    return np.linalg.norm(network_function(x)[-1] - y) ** 2 / x.size


#### Part 2 : set up grade calculation functions.


# GRADED FUNCTION

def J_W3(x, y):
    a0, z1, a1, z2, a2, z3, a3 = network_function(x)
    J = 2 * (a3 - y)
    J = J * d_sigma(z3)
    J = J @ a2.T / x.size
    return J


def J_b3(x, y):
    a0, z1, a1, z2, a2, z3, a3 = network_function(x)
    J = 2 * (a3 - y)
    J = J * d_sigma(z3)
    J = np.sum(J, axis=1, keepdims=True) / x.size
    return J


def J_W2(x, y):
    # The first two lines are identical to in J_W3.
    a0, z1, a1, z2, a2, z3, a3 = network_function(x)
    J = 2 * (a3 - y)
    # the next two lines implement da3/da2, first Ïƒ' and then W3.
    J = J * d_sigma(z3)
    J = (J.T @ W3).T
    # then the final lines are the same as in J_W3 but with the layer number bumped down.
    J = J * d_sigma(z2)
    J = J @ a1.T / x.size
    return J


def J_b2(x, y):
    a0, z1, a1, z2, a2, z3, a3 = network_function(x)
    J = 2 * (a3 - y)
    J = J * d_sigma(z3)
    J = (J.T @ W3).T
    J = J * d_sigma(z2)
    J = np.sum(J, axis=1, keepdims=True) / x.size
    return J


def J_W1(x, y):
    a0, z1, a1, z2, a2, z3, a3 = network_function(x)
    J = 2 * (a3 - y)
    J = J * d_sigma(z3)
    J = (J.T @ W3).T
    J = J * d_sigma(z2)
    J = (J.T @ W2).T
    J = J * d_sigma(z1)
    J = J @ a0.T / x.size
    return J


def J_b1(x, y):
    a0, z1, a1, z2, a2, z3, a3 = network_function(x)
    J = 2 * (a3 - y)
    J = J * d_sigma(z3)
    J = (J.T @ W3).T
    J = J * d_sigma(z2)
    J = (J.T @ W2).T
    J = J * d_sigma(z1)
    J = np.sum(J, axis=1, keepdims=True) / x.size
    return J


### PART 3, set up training data and iteration schedule.

def plot_training(x, y, iterations=1000, aggression=3.5, noise=1):
    global W1, W2, W3, b1, b2, b3
    fig, ax = plt.subplots(dpi=80)

    ax.plot(y[0], y[1], lw=1.5);

    while iterations >= 0:
        j_W1 = J_W1(x, y) * (1 + np.random.randn() * noise)
        j_W2 = J_W2(x, y) * (1 + np.random.randn() * noise)
        j_W3 = J_W3(x, y) * (1 + np.random.randn() * noise)
        j_b1 = J_b1(x, y) * (1 + np.random.randn() * noise)
        j_b2 = J_b2(x, y) * (1 + np.random.randn() * noise)
        j_b3 = J_b3(x, y) * (1 + np.random.randn() * noise)

        W1 = W1 - j_W1 * aggression
        W2 = W2 - j_W2 * aggression
        W3 = W3 - j_W3 * aggression
        b1 = b1 - j_b1 * aggression
        b2 = b2 - j_b2 * aggression
        b3 = b3 - j_b3 * aggression

        if (iterations % 100 == 0):
            nf = network_function(x)[-1]
            ax.plot(nf[0], nf[1], lw=2);
        iterations -= 1

    nf = network_function(x)[-1]
    ax.plot(nf[0], nf[1], lw=2.5);


def training_data(N=100):
    x = np.arange(0, 1, 1 / N)
    y = np.array([
        16 * np.sin(8 * np.pi * x),
        13 * np.cos(2 * np.pi * x)
    ]
    ) / 20
    y = (y + 1) / 2
    x = np.reshape(x, (1, N))
    # y = np.reshape(y, (2, N))

    plt.plot(y[0], y[1])
    plt.show()
    return x, y


## let's go


x, y = training_data()

reset_network()

plot_training(x, y, iterations=10000, aggression=7, noise=1)


